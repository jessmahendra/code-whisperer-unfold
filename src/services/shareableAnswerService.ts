
/**
 * Service for handling shareable answer creation and retrieval
 */

interface Reference {
  filePath: string;
  lineNumbers?: string;
  snippet?: string;
  lastUpdated?: string;
  author?: string;
  authorEmail?: string;
}

interface VisualContext {
  type: 'flowchart' | 'component' | 'state';
  syntax: string;
}

export interface ShareableAnswer {
  id: string;
  question: string;
  answer: {
    text: string;
    confidence: number;
    references: Reference[];
    lastUpdated?: string;
    visualContext?: VisualContext;
  };
  createdAt: string;
  views: number;
  shares: number;
  referrers: {
    url: string;
    date: string;
  }[];
}

// Using sessionStorage for convenience in this demo
// Storage key
const STORAGE_KEY = 'unfold_shareableAnswers';

// Initialize example shareable answers on module load
(() => {
  // Try to get existing answers from localStorage first
  const existingLocalStorage = localStorage.getItem(STORAGE_KEY);
  
  // Initialize storage if needed
  if (!existingLocalStorage) {
    const exampleAnswers = {
      'example-demo-abc123': {
        id: 'example-demo-abc123',
        question: 'How does the share functionality work in the Unfold application?',
        answer: {
          text: "The share functionality in Unfold allows users to create shareable links for answers generated by the system. The links are stored in both localStorage and sessionStorage for better persistence, which means they'll work across different browser sessions unless storage is explicitly cleared. The share feature includes metadata for social sharing and tracks usage analytics like views and share counts.",
          confidence: 0.85,
          references: [
            {
              filePath: 'src/services/shareableAnswerService.ts',
              lineNumbers: '10-250',
              snippet: 'export function createShareableAnswer(...) { ... }',
              lastUpdated: new Date().toISOString()
            },
            {
              filePath: 'src/components/ShareButton.tsx',
              lineNumbers: '20-90',
              snippet: 'export default function ShareButton(...) { ... }',
              lastUpdated: new Date().toISOString()
            }
          ],
          lastUpdated: new Date().toISOString(),
          visualContext: {
            type: 'flowchart',
            syntax: 'graph TD\n  A[User clicks Share] --> B[Generate unique ID]\n  B --> C[Store in localStorage]\n  C --> D[Create shareable URL]\n  D --> E[Copy to clipboard]\n  E --> F[Show success toast]'
          }
        },
        createdAt: new Date().toISOString(),
        views: 12,
        shares: 5,
        referrers: [
          {
            url: 'direct',
            date: new Date().toISOString()
          }
        ]
      }
    };
    
    // Store in both localStorage and sessionStorage for persistence
    localStorage.setItem(STORAGE_KEY, JSON.stringify(exampleAnswers));
    sessionStorage.setItem(STORAGE_KEY, JSON.stringify(exampleAnswers));
  }
})();

/**
 * Generate a readable but unique ID for shareable answers
 */
export function generateReadableId(): string {
  // Use a combination of words for readable IDs
  const adjectives = ['quick', 'smart', 'clever', 'bright', 'easy', 'simple', 'handy'];
  const nouns = ['answer', 'guide', 'help', 'tip', 'info', 'notes', 'hint'];
  
  // Add randomness with a 5-character alphanumeric string
  const random = Math.random().toString(36).substring(2, 7);
  
  // Pick random words
  const adjective = adjectives[Math.floor(Math.random() * adjectives.length)];
  const noun = nouns[Math.floor(Math.random() * nouns.length)];
  
  // Combine into readable ID (e.g., "quick-answer-x7f3q")
  return `${adjective}-${noun}-${random}`;
}

/**
 * Create a shareable answer from the current question and answer
 */
export async function createShareableAnswer(
  question: string, 
  answer: {
    text: string;
    confidence: number;
    references: Reference[];
    visualContext?: VisualContext;
  }
): Promise<{ id: string; url: string; fullUrl: string }> {
  // Generate a unique, readable ID
  const shareId = generateReadableId();
  
  // Create the shareable answer object
  const shareableAnswer: ShareableAnswer = {
    id: shareId,
    question,
    answer: {
      text: answer.text,
      confidence: answer.confidence,
      references: answer.references || [],
      lastUpdated: new Date().toISOString(),
      visualContext: answer.visualContext
    },
    createdAt: new Date().toISOString(),
    views: 0,
    shares: 0,
    referrers: []
  };
  
  // Store in both localStorage and sessionStorage for persistence
  const existingAnswers = JSON.parse(localStorage.getItem(STORAGE_KEY) || '{}');
  existingAnswers[shareId] = shareableAnswer;
  localStorage.setItem(STORAGE_KEY, JSON.stringify(existingAnswers));
  
  // Also store in sessionStorage as backup
  sessionStorage.setItem(STORAGE_KEY, JSON.stringify(existingAnswers));
  
  // Return the shareable link data
  const baseUrl = window.location.origin;
  return {
    id: shareId,
    url: `/share/${shareId}`,
    fullUrl: `${baseUrl}/share/${shareId}`
  };
}

/**
 * Get a shareable answer by ID
 */
export function getShareableAnswer(id: string): ShareableAnswer | null {
  // First try localStorage
  let existingAnswers = JSON.parse(localStorage.getItem(STORAGE_KEY) || '{}');
  let answer = existingAnswers[id];
  
  // If not found in localStorage, try sessionStorage
  if (!answer) {
    existingAnswers = JSON.parse(sessionStorage.getItem(STORAGE_KEY) || '{}');
    answer = existingAnswers[id];
  }
  
  if (!answer) return null;
  
  // Increment view count
  answer.views += 1;
  
  // Add referrer if available
  if (document.referrer) {
    answer.referrers.push({
      url: document.referrer,
      date: new Date().toISOString()
    });
  }
  
  // Save updated view count to both storage mechanisms
  existingAnswers[id] = answer;
  localStorage.setItem(STORAGE_KEY, JSON.stringify(existingAnswers));
  sessionStorage.setItem(STORAGE_KEY, JSON.stringify(existingAnswers));
  
  return answer;
}

/**
 * Track a share event
 */
export function trackShare(id: string, platform: string): void {
  // First try localStorage
  let existingAnswers = JSON.parse(localStorage.getItem(STORAGE_KEY) || '{}');
  let answer = existingAnswers[id];
  
  // If not found in localStorage, try sessionStorage
  if (!answer) {
    existingAnswers = JSON.parse(sessionStorage.getItem(STORAGE_KEY) || '{}');
    answer = existingAnswers[id];
  }
  
  if (!answer) return;
  
  // Increment share count
  answer.shares += 1;
  
  // Save updated share count to both storage mechanisms
  existingAnswers[id] = answer;
  localStorage.setItem(STORAGE_KEY, JSON.stringify(existingAnswers));
  sessionStorage.setItem(STORAGE_KEY, JSON.stringify(existingAnswers));
}
